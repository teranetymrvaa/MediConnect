// src/api/axiosInstance.js
import axios from "axios";

// Axios instansiyasƒ±
const axiosInstance = axios.create({
  baseURL: "http://localhost:5000/api",
});

// ‚úÖ Request interceptor ‚Äì h…ôr request g√∂nd…ôril…ônd…ô token …ôlav…ô et
axiosInstance.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem("accessToken");

    console.log("üîÑ Yeni request g√∂nd…ôrilir:", config.url);
    if (accessToken) {
      console.log("üîê Access Token …ôlav…ô olunur:", accessToken);
      config.headers.Authorization = `Bearer ${accessToken}`;
    } else {
      console.log("‚ö†Ô∏è Access Token tapƒ±lmadƒ±.");
    }

    return config;
  },
  (error) => {
    console.error("‚ùå Request interceptor x…ôtasƒ±:", error);
    return Promise.reject(error);
  }
);

// ‚úÖ Response interceptor ‚Äì 401 olduqda refresh token il…ô yenil…ô
axiosInstance.interceptors.response.use(
  (response) => {
    console.log("‚úÖ Response alƒ±ndƒ±:", response.config.url);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    const refreshToken = localStorage.getItem("refreshToken");

    // Access token expired and refresh token is available
    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      refreshToken
    ) {
      originalRequest._retry = true;
      console.warn("‚è≥ Access Token vaxtƒ± bitdi. Refresh edil…ôc…ôk...");

      try {
        const role = localStorage.getItem("role"); // 'doctor' v…ô ya 'patient'

        // H…ôr rola uyƒüun refresh endpoint
        const refreshEndpoint =
          role === "doctor" ? "/doctors/refresh" : "/patients/refresh";

        console.log("üîÑ Refresh token il…ô yeni access token alƒ±nƒ±r...");
        const res = await axios.post(
          `http://localhost:5000/api${refreshEndpoint}`,
          { refreshToken }
        );

        const newAccessToken = res.data.accessToken;
        console.log("‚úÖ Yeni access token alƒ±ndƒ±:", newAccessToken);

        // Yeni access tokeni yadda≈üa yaz
        localStorage.setItem("accessToken", newAccessToken);

        // Yeni tokeni request-…ô …ôlav…ô et v…ô yenid…ôn g√∂nd…ôr
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå Refresh token x…ôtasƒ±:", refreshError);

        // Tokenl…ôr silinir v…ô login s…ôhif…ôsin…ô y√∂nl…ôndirilir
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("doctorId");
        localStorage.removeItem("patientId");
        localStorage.removeItem("role");

        console.warn("üîì Yenid…ôn giri≈ü t…ôl…ôb olunur.");
        window.location.href = "/login";
      }
    }

    // ∆èg…ôr ba≈üqa s…ôb…ôbd…ôn x…ôtadƒ±rsa
    console.error("‚ùå Response interceptor x…ôtasƒ±:", error);
    return Promise.reject(error);
  }
);

export default axiosInstance;
